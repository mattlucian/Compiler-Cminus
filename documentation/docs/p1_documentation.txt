
Matt Myers
COP4620
Dr. Eggen

Project 1
Due: 1/27/2015 @ 11:59pm
Submitted: 1/27/2015 @ 8pm


Overview:
	- This program scans a file that has C-- code
	written in it. It analyzes the tokens in the code
	and separates/categorizes everything that is read in.
	If an error is detected, it reports the error and 
	continues analyzing the file. 
	
	- This is the first part of the cumulative compiler
	that we will be creating.
	
	- You execute this program by typing the following
	commands in a linux environment with Java 1.7 installed
	
		unshar n00748663_p1
		make
		p1 input.txt
		

External files:
	- input.txt 
		- This file can be any name and the name is passed
		via a program argument.
	- (To Be Implemented) output.txt
		- This file is not being generated yet, but for p2
		I will add the output to this output.txt file, allowing
		my parser from p2 to read in what is generated by p1.

	
Algorithms & Classes:
	1. Compiler
		- This is the main program file. It reads in the program 
		argument and creates a BufferedReader with the program argument.
		If the BufferedReader exists and is not null, it passes it to the Reader class
		
	2. Reader
		- The Reader class contains the bulk of the logic for this program.
		It handles the following components:
 			1. Scan each line of the file
			2. If the line is empty, disregard, otherwise
			3. Check character by character and compare them to the valid values
			   that the program can accept
			4. Once a token has been identified, store it with a value, type, and line #
			5. Once all tokens have been analyzed, print the results
				5.A: First print the input line that was scanned
				5.B: For any tokens that belong to that line, print the type and value
		
	3. LexToken
		- This is a container class that holds the values of each token. 
		It contains the following information:
			1. Token Type (ID, KEYWORD, FLOAT, etc.)
			2. Token Value
			3. Depth Level
			4. Line Number (this is used to help me output the data in the correct order)
		
	4. TokenAnalyzer
		- This class simply analyzes the "currentToken" that's being read in by the
		reader class and determines what it matches up to. It has methods such as:
			- isDigit
			- isCharacter (to determine if it's a word)
			- isKeyword (analyzes all the possible keywords allowed)
			- isOperator (checks if the character is a valid operator)
			- isExpandableOperator (checks if the operator CAN be a 2 character operator)
				**Doesn't necessarily check to see if it IS a 2 character operator, just if it can be
			- isValidExpandableOperator (checks both characters to see if it's ==, <=, etc.)
			- isPeriod (checks for '.')
			- isExponentialSign (checks for capital 'E')
		